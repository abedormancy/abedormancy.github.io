<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶孤帆</title>
  <subtitle>ooOps</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yygf.ga/"/>
  <updated>2018-08-26T02:47:04.005Z</updated>
  <id>http://yygf.ga/</id>
  
  <author>
    <name>abedormancy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>07.消除过期的对象引用</title>
    <link href="http://yygf.ga/2018/08/26/07-%E6%B6%88%E9%99%A4%E8%BF%87%E6%9C%9F%E7%9A%84%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8/"/>
    <id>http://yygf.ga/2018/08/26/07-消除过期的对象引用/</id>
    <published>2018-08-26T02:41:56.000Z</published>
    <updated>2018-08-26T02:47:04.005Z</updated>
    
    <content type="html"><![CDATA[<p>先来看这样一个简单的栈实现例子。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> Object[] elements;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">()</span> </span>&#123;</div><div class="line">		elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span> </span>&#123;</div><div class="line">		ensureCapacity();</div><div class="line">		elements[size++] = e;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (size == <span class="number">0</span>)</div><div class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</div><div class="line">		<span class="keyword">return</span> elements[--size];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/***</span></div><div class="line">	 * Ensure space for at least one more element, roughly* doubling the capacity</div><div class="line">	 * each time the array needs to grow.</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span> (elements.length == size)</div><div class="line">			elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不严格的来说，这段程序隐藏着”内存泄露“。在极端情况下，会引起磁盘分页 (disk paging)，甚至导致 OOM (OutOfMemoryError)，虽然这种失败的情况相对比较少见。</p>
<p>栈先通过 <code>ensureCapacity()</code> 方法增长后，再收缩，那么从栈中弹出的这些对象即使被客户端不再引用，它们也不会被当做垃圾回收掉。这是因为栈内部维护着这些对象的过期引用( obsolete reference )，过期引用是指永远也不会再被解除的引用。</p>
<p>在支持 GC 的语言中，内存泄露是很隐蔽的（称这类内存泄露为“无意识的对象保持”更为恰当）。如果一个对象引用被无意识的保留起来，那么 GC 不仅不会处理这个对象，而且也不会处理被这个对象所引用的对象，从而对性能造成潜在的影响。</p>
<p>这类问题的解决办法很简单：一旦对象引用过期后，只需要将指向它的引用置空即可。对于上述的例子，弹出栈顶元素后指向它的引用就过期了。 修订后的 pop() 方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (size == <span class="number">0</span>)</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</div><div class="line">	Object obj = elements[--size];</div><div class="line">	elements[size] = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>清除过期引用还有一个好处是，如果它们以后被不小心错误的引用了，会抛出 NPE，而不是悄悄地错误运行下去，尽快检测出程序中的错误中是好的。</p>
<p>那么我们是否需要将不再用到的对象引用都清空？其实没有必要这样做，<strong>清空对象引用只是一种例外情况，而不是一种规范</strong>。消除过期引用的最好方法是让包含该引用的变量结束其声明周期。例如你在一个紧凑的作用域范围定义的每一个变量，它们会自然而然的被消除。</p>
<p>那到底什么时候该清空引用？问题在于 Stack 类自己管理内存。存储池包含了 elements 数组（对象的引用，而不是对象本身）的元素。数组的活动区域 ( 0 ~ size ) 的元素是已分配的 ( allocated )，而数组的其余部分则是自由 ( free ) 的。对 GC 来说，整个 elements 数组中的所有对象引用同等有效，只有程序员知道这些非活动部分已经没有用处了。所以程序员应该通过显示的清空数组元素来告诉 GC，GC 才知道这些非活动部分可以被回收。</p>
<p>所以<strong>当一个类自己管理内存时，程序员应该警惕内存泄露问题</strong>。</p>
<p><strong>内存泄露的另一种常见来源是缓存</strong>。一旦你把对象引用放到缓存中，它就很容易被遗忘掉。对于这种问题，有几个解决方案。例如 WeakHashMap 中的 entry 的生命周期是由外部对其 key 的引用来决定，记住如果 entry 的期望寿命是由外部引用的 key ，而不是 value 时，才可以用 WeakHashMap。 </p>
<p>更常见的是缓存有用的生命周期不太好定义，随着时间推移，entry 的价值会变得越来越低。在这种情况下可以通过后台线程（也许是 ScheduledThreadPoolExecutor）来清除已经废弃的 entry。也可以通过向缓存中添加新条目时顺便清理。LinkedHashMap 使用 removeEldestEntry 方法实现了后一种方案。对于更复杂的缓存，可能需要使用<code>java.lang.ref</code>。</p>
<p><strong>第三个常见的内存泄露来源是监听器和其他回调</strong>，如果你实现了一个 API ，客户端在这个 API 中注册回调，却没注销，除非你采取一些措施，否则回调会积累起来。确保回调被及时被当做垃圾回收的最佳做法是只保存它们的弱引用 ( weak reference )，例如只将它们作为键存储在 WeakHashMap 中。</p>
<p>关于 java 中的强、软、弱、虚等引用可以参考 <a href="http://www.cnblogs.com/dolphin0520/p/3784171.html" target="_blank" rel="external">Java 如何有效避免OOM</a></p>
]]></content>
    
    <summary type="html">
    
      不要认为有了 GC 就可高枕无忧，警惕内存泄露问题~
    
    </summary>
    
      <category term="java" scheme="http://yygf.ga/categories/java/"/>
    
    
      <category term="effective java" scheme="http://yygf.ga/tags/effective-java/"/>
    
      <category term="note" scheme="http://yygf.ga/tags/note/"/>
    
      <category term="0x01.创建和销毁对象" scheme="http://yygf.ga/tags/0x01-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>06.避免创建不必要的对象</title>
    <link href="http://yygf.ga/2018/08/24/06-%E9%81%BF%E5%85%8D%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%BF%85%E8%A6%81%E7%9A%84%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yygf.ga/2018/08/24/06-避免创建不必要的对象/</id>
    <published>2018-08-24T01:58:17.000Z</published>
    <updated>2018-08-24T02:04:36.255Z</updated>
    
    <content type="html"><![CDATA[<p>通常来说，重用一个对象比创建一个对象合适，毕竟重用的对象更快。如果对象是不可变的，那么总是可以重用它的。下面来看个极端的例子。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = <span class="keyword">new</span> String(<span class="string">"hello"</span>); <span class="comment">// 不要这样做</span></div></pre></td></tr></table></figure>
<p>相信大部分人也不会这么写，如果上面代码被频繁调用，那么它会频繁的创建新的 String 对象，但这其实是没有必要的。我们知道 String 是不可变的，所以我们只需要</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String s = <span class="string">"hello"</span>;</div></pre></td></tr></table></figure>
<p>即可。此外，jvm 还会将 “hello” 放入字符串常量池，对于所有运行在同一虚拟机上的代码，只要它们包含相同的字符串字面量，该对象就会被重用。</p>
<p>一般来说，如果一个类提供工厂方法，那么我们应该去使用工厂方法而不是构造器来获取对象。就拿包装类 <code>Integer</code> 来说，它提供了一个 <code>valueOf</code> 的静态工厂方法来获取类的实例，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Integer number = Integer.valueOf(<span class="number">15</span>);</div><div class="line"><span class="comment">// Integer number = 15;   // 通常我们使用这种形式，这其实和上面是等价的</span></div><div class="line"></div><div class="line"><span class="comment">// Integer number = new Integer(15); // java9 中已经被弃用了，程序员不应该直接使用它。</span></div></pre></td></tr></table></figure>
<p>通过查看 <code>Integer.valueOf</code> 的代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">		<span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们可以知道 Integer 其实是有缓存的。如果数值在缓存内是会直接返回缓存中的实例，否则才会通过构造器新建。 ( 默认情况下，Integer会缓存 byte 位的数值，也就是 ~128 - 127)</p>
<p>一般对象的创建并不像基本类型的包装类这样来的简单，它们创建的代价通常比较昂贵。来看下面一个例子，我们需要一个方法，它通过正则检查一个参数是否是罗马数字。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> s.matches(<span class="string">"^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)"</span> + <span class="string">"(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从直觉上来说并没有什么问题对不对，毕竟 String 类中有这样一个检查字符串与当前正则是否匹配的成员方法可以直接拿来用。但其实这个方法并不适合在性能临界的的情况下重复使用，我们来看下 <code>String.matches</code> 的源码就知道。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> Pattern.matches(regex, <span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它这里直接引用了 <code>Pattern.matches</code> 这个静态方法，而 <code>Pattern.matches</code> 的实现如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String regex, CharSequence input)</span> </span>&#123;</div><div class="line">	Pattern p = Pattern.compile(regex); <span class="comment">// = new Pattern(regex, 0);</span></div><div class="line">	Matcher m = p.matcher(input);</div><div class="line">	<span class="keyword">return</span> m.matches();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 可以看到它其实是每次都创建了新的 Pattern 实例来检测，为 Pattern 创建实例代价其实是昂贵的，因为它需要将正则表达式编译成有限状态机。为了重用，我们一般会这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> java.util.regex.Pattern;</div><div class="line"></div><div class="line"><span class="comment">//Reusing expensive object for improved performance</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RomanNumerals</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern ROMAN = Pattern</div><div class="line">			.compile(<span class="string">"^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)"</span> + <span class="string">"(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$"</span>);</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isRomanNumeral</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> ROMAN.matcher(s).matches();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果经常调用，相比之下改进的版本会有显著的性能提升。</p>
<p>讲到这里，要提醒一点，项目里经常看到有人如下类似的写法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SimpleDateFormat sf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(Date date)</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> sf.format(date);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看起来好像没什么问题对不对，这不是类似的吗，把这个 SimpleDateFormat 缓存起来复用了，不用每次创建新的实例，提升性能。</p>
<p>emm… ，性能是提升了。但在多线程环境下不能这样做，我们看下 SImpleDateFormat 源码内部的注释就知道了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">* Date formats are not <span class="keyword">synchronized</span>.</div><div class="line">* It is recommended to create separate format instances <span class="keyword">for</span> each thread.</div><div class="line">* If multiple threads access a format concurrently, it must be <span class="keyword">synchronized</span></div><div class="line">* externally.</div></pre></td></tr></table></figure>
<p>非同步，建议为每个线程创建单独的 format 实例，如果多个线程访问一个 format 实例，那么必须同步。主要是因为 format 方法使用到了对象的可变的成员域，多线程同时修改让其变得混乱，你完全预料不到在多线程环境下，这个方法会给你返回一个什么神奇字符串。</p>
<p>那么又有同学会问，那之前的 Pattern 呢，它就没有线程安全问题吗，我们直接看代码。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Matcher <span class="title">matcher</span><span class="params">(CharSequence input)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!compiled) &#123;</div><div class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123; <span class="comment">// 双检锁</span></div><div class="line">            <span class="keyword">if</span> (!compiled)</div><div class="line">                compile();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    Matcher m = <span class="keyword">new</span> Matcher(<span class="keyword">this</span>, input);</div><div class="line">    <span class="keyword">return</span> m;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Pattern.matcher</code> 为了性能，通过 synchronized 关键字使用双检锁方式来检查有限状态机是否编译完毕。因为 Pattern 中并没有任何可修改成员域的方法提供给外部客户端，所以 Pattern 是不可变的，加上返回的是新的 Matcher 实例，所以这个方法在多线程环境下是线程安全的。</p>
<p>聪明的同学可能会注意到，这个 Matcher 才是对标上面的 SimpleDateFormat。Matcher 源码中同样有条类似的注释。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* Instances of <span class="keyword">this</span> <span class="class"><span class="keyword">class</span> <span class="title">are</span> <span class="title">not</span> <span class="title">safe</span> <span class="title">for</span> <span class="title">use</span> <span class="title">by</span> <span class="title">multiple</span> <span class="title">concurrent</span> <span class="title">threads</span>.</span></div></pre></td></tr></table></figure>
<p>最后需要注意的一点是避免无意识的自动装箱 (autoboxing) 操作，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">sum</span><span class="params">()</span> </span>&#123;</div><div class="line">	Long sum = <span class="number">0L</span>;</div><div class="line">	<span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt;= Integer.MAX_VALUE; i++)</div><div class="line">		sum += i;</div><div class="line">	<span class="keyword">return</span> sum;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不小心将 l 写成了大写的 L ，本来想声明一个基本类型却声明成了一个包装类型，这导致 <code>sum += i</code> 在疯狂的进行装箱操作。</p>
<p>试着回想一下这一篇的标题，不记得了倒回去看一下。</p>
<p>嗯，避免创建<strong>不必要</strong>的对象。希望没有让人误解这篇文章在暗示“创建对象都是很昂贵的操作，应该避免创建对象“。相反创建和回收构造函数很少做显示工作的小对象是很廉价的操作，尤其是在现代 JVM 上。通过创建附加的对象，提升程序的清晰性、简洁性和功能性，这通常是件好事。</p>
<p>相反，通过维护自己的对象池 (object pool) 来避免创建对象并不是一件很好的做法，除非池中的对象是非常重量级的。真正需要使用对象池的典型对象就是数据库连接池。建立数据库连接的代价是非常昂贵的，而且数据库会限制你只能用一定的数量连接，因此重用这些对象非常有意义。但是一般来说维护自己的对象池必定会把代码弄的很乱，同时增加内存占用，并损害性能。现代 JVM 实现具有高度优化的 GC，其性能很容易超过轻量级对象池的性能。</p>
<p>与该条目对应的是 (.50) 中的保护性拷贝，当前条目的意思是“当你应该重用一个现有对象时，不要创建新的对象”，而 (.50) 中条目的意思是“当你应该创建一个新的对象时，不要重复使用现有对象”。请注意当保护性拷贝被使用时，重用对象的代价远远大于创建重复对象的代价。必要时如果没能实施保护性拷贝，将会导致潜在的错误和安全漏洞，而创建不必要的对象只会影响程序的风格和性能。</p>
]]></content>
    
    <summary type="html">
    
      避免无意识的装箱操作，优先使用类提供的静态工厂方法而不是构造器来创建对象~
    
    </summary>
    
      <category term="java" scheme="http://yygf.ga/categories/java/"/>
    
    
      <category term="effective java" scheme="http://yygf.ga/tags/effective-java/"/>
    
      <category term="note" scheme="http://yygf.ga/tags/note/"/>
    
      <category term="0x01.创建和销毁对象" scheme="http://yygf.ga/tags/0x01-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>05.依赖注入 (DI) 比硬连接资源 (hardwiring resources) 更可取</title>
    <link href="http://yygf.ga/2018/08/24/05-%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5-DI-%E6%AF%94%E7%A1%AC%E8%BF%9E%E6%8E%A5%E8%B5%84%E6%BA%90-hardwiring-resources-%E6%9B%B4%E5%8F%AF%E5%8F%96/"/>
    <id>http://yygf.ga/2018/08/24/05-依赖注入-DI-比硬连接资源-hardwiring-resources-更可取/</id>
    <published>2018-08-24T01:46:22.000Z</published>
    <updated>2018-08-24T01:52:53.413Z</updated>
    
    <content type="html"><![CDATA[<p>hardwiring resources，我也不太知道该怎么翻译，跟硬编码 (hard code)可能 有些类似，书中代码的意思是把资源写死在类中（丧失灵活性）或者工具类中修改资源（并发不好控制）。但资源应该通过外部获取而不是直接绑定在工具类中，例如下面这个拼写检查器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Dependency injection provides flexibility and testability</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpellChecker</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Lexicon dictionary;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SpellChecker</span><span class="params">(Lexicon dictionary)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.dictionary = Objects.requireNonNull(dictionary);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String word)</span> </span>&#123; ... &#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">suggestions</span><span class="params">(String typo)</span> </span>&#123; ... &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以用任意的 Lexicon 类型的字典传递给构造器得到基于不同的拼写检查器。因为字典不可变特性，多个客户端如果需要完全共享同一个字典，而不用多次实例化这个字典。所以这种模式有一个有用的变体是将资源工厂方法传递给构造方法。工厂是一个可以重复调用创建实例类型的对象，java8 引入的 <code>Supplier&lt;T&gt;</code> 函数接口非常适合代表工厂。通常使用有界通配符类型 (bounded wildcard type) 来约束工厂的入参，例如：</p>
<p><code>Mosic create(Supplier&lt;? extends Tile&gt; tileFactory)</code></p>
<p>尽管依赖注入很灵活很好测试，但上千依赖的大型项目也有可能因此变得混乱。所以一般项目中都会使用依赖注入框架来解决这些问题，如 Dagger、Guice、Spring 等。注意，以上代码示例中这种用手动为依赖注入的 API 非常适合这些框架的使用。</p>
<p>总之，不要使用单例或静态实用程序类来实现依赖于一个或多个底层资源的类，这些底层资源的行为会影响类的行为，也不要让类直接创建这些资源。相反，将资源或创建资源的工厂传递给构造函数(或静态工厂或构造函数)。这种称为依赖注入的实践将大大增强类的灵活性、可重用性和可测试性。</p>
]]></content>
    
    <summary type="html">
    
      这个。。大家应该用的都比较多~
    
    </summary>
    
      <category term="java" scheme="http://yygf.ga/categories/java/"/>
    
    
      <category term="effective java" scheme="http://yygf.ga/tags/effective-java/"/>
    
      <category term="note" scheme="http://yygf.ga/tags/note/"/>
    
      <category term="0x01.创建和销毁对象" scheme="http://yygf.ga/tags/0x01-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>04.用私有构造器实现不可实例化类</title>
    <link href="http://yygf.ga/2018/08/21/04-%E7%94%A8%E7%A7%81%E6%9C%89%E6%9E%84%E9%80%A0%E5%99%A8%E5%AE%9E%E7%8E%B0%E4%B8%8D%E5%8F%AF%E5%AE%9E%E4%BE%8B%E5%8C%96%E7%B1%BB/"/>
    <id>http://yygf.ga/2018/08/21/04-用私有构造器实现不可实例化类/</id>
    <published>2018-08-21T15:37:00.000Z</published>
    <updated>2018-08-21T16:05:37.694Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中，我们经常会用到一些工具类 (utility class) ，这些工具类实例化对它们没有任何意义。但是我们知道在缺少显示构造器的情况下，编译器会自动提供一个公有无参数的 default constructor，所以我们显示的提供一个私有构造器即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 工具类，不可实例化</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilityClass</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">UtilityClass</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</div><div class="line">	&#125;</div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种习惯用法有一个副作用就是不能被子类化~</p>
]]></content>
    
    <summary type="html">
    
      这可能是 effective java 中最简单的一个0 0.
    
    </summary>
    
      <category term="java" scheme="http://yygf.ga/categories/java/"/>
    
    
      <category term="effective java" scheme="http://yygf.ga/tags/effective-java/"/>
    
      <category term="note" scheme="http://yygf.ga/tags/note/"/>
    
      <category term="0x01.创建和销毁对象" scheme="http://yygf.ga/tags/0x01-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>03.用私有构造器或枚举类实现单例</title>
    <link href="http://yygf.ga/2018/08/21/03-%E7%94%A8%E7%A7%81%E6%9C%89%E6%9E%84%E9%80%A0%E5%99%A8%E6%88%96%E6%9E%9A%E4%B8%BE%E7%B1%BB%E5%AE%9E%E7%8E%B0%E5%8D%95%E4%BE%8B/"/>
    <id>http://yygf.ga/2018/08/21/03-用私有构造器或枚举类实现单例/</id>
    <published>2018-08-21T15:02:42.000Z</published>
    <updated>2018-08-21T16:05:09.345Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Singleton</strong>(单例) 指的是仅仅只会被实例化一次的类。通常用来表示无状态对象，例如 function <em>(.24)</em> 或本质上唯一的系统组件。这里不打算讲设计模式中单例模式的什么饿汉，懒汉，DCL（双检锁）等等，有兴趣的可以自己上网搜索。</p>
<p>effective java 中提出了三种方法实现 Singleton 。</p>
<p>第一种直接使用公有域。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilder</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//...</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种使用公有静态工厂方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> INSTANCE;</div><div class="line">	&#125;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//...</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种有个主要优势是可以使用方法引用，例如：<code>Supplier&lt;Singleton&gt; singleton = Singleton::getInstance;</code></p>
<p>以上两种如果不对私有构造器做处理的话，享有特权的客户端可以借助 AccessibleObject.setAccessible 方法通过反射 <em>(.65)</em> 机制调用私有构造器。如果要防御这种攻击，可以修改私有构造器，在生成第二个对象时抛出异常。这两种如果要实现序列化还比较麻烦，不仅在类声明上需要 “implements Serializable” ，并且必须声明所有的实例域都是瞬时 (transient) 的，还要提供一个 readResolve <em>(.89)</em> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">return</span> INSTANCE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三种方式是使用单元素枚举类。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Singleton &#123;</div><div class="line">	INSTANCE;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">leaveTheBuilding</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">//...</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方式无偿的提供了序列化机制，并且防止多次实例化，即使面对复杂的序列化或反射攻击的时候。</p>
<p>Josh Bloch 大大给出的结论是，<strong>单元素枚举类是实现单例的最佳方法</strong>。</p>
<p>但有一点请注意，如果你的单例类需要继承非枚举的超类，那么你就不可以用这个方法。</p>
]]></content>
    
    <summary type="html">
    
      单元素枚举类是实现单例类的最佳方案~
    
    </summary>
    
      <category term="java" scheme="http://yygf.ga/categories/java/"/>
    
    
      <category term="effective java" scheme="http://yygf.ga/tags/effective-java/"/>
    
      <category term="note" scheme="http://yygf.ga/tags/note/"/>
    
      <category term="0x01.创建和销毁对象" scheme="http://yygf.ga/tags/0x01-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>02.面对多个参数的构造器(Constructor)要考虑使用构建器(Builder)</title>
    <link href="http://yygf.ga/2018/08/20/02-%E9%9D%A2%E5%AF%B9%E5%A4%9A%E4%B8%AA%E5%8F%82%E6%95%B0%E7%9A%84%E6%9E%84%E9%80%A0%E5%99%A8-Constructor-%E8%A6%81%E8%80%83%E8%99%91%E4%BD%BF%E7%94%A8%E6%9E%84%E5%BB%BA%E5%99%A8-Builder/"/>
    <id>http://yygf.ga/2018/08/20/02-面对多个参数的构造器-Constructor-要考虑使用构建器-Builder/</id>
    <published>2018-08-20T02:16:00.000Z</published>
    <updated>2018-08-21T16:03:24.025Z</updated>
    
    <content type="html"><![CDATA[<p>Builder 模式就不做过多介绍了，在设计那些构造函数或静态工厂有多个参数的类时，构建器模式是一个很好的选择，尤其是当许多<strong>参数是可选</strong>的或<strong>类型相同</strong>时。Builder 比 JaveBeans 更安全。</p>
<p>缺点是写起来比较麻烦，好在我们有 Lombok 神器帮我们自动生成。</p>
<p>构建器模式还非常适用类层次结构，下面是一个书中的一个例子：</p>
<p><code>Pizza.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> effectivejava.chapter2.item2.hierarchicalbuilder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.*;</div><div class="line"></div><div class="line"><span class="comment">// Note that the underlying "simulated self-type" idiom  allows for arbitrary fluid hierarchies, not just builders</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">enum</span> Topping &#123;</div><div class="line">		HAM, MUSHROOM, ONION, PEPPER, SAUSAGE</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">final</span> Set&lt;Topping&gt; toppings;</div><div class="line"></div><div class="line">	<span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</div><div class="line">		EnumSet&lt;Topping&gt; toppings = EnumSet.noneOf(Topping.class);</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> T <span class="title">addTopping</span><span class="params">(Topping topping)</span> </span>&#123;</div><div class="line">			toppings.add(Objects.requireNonNull(topping));</div><div class="line">			<span class="keyword">return</span> self();</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">abstract</span> Pizza <span class="title">build</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">		<span class="comment">// Subclasses must override this method to return "this"</span></div><div class="line">		<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">self</span><span class="params">()</span></span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	Pizza(Builder&lt;?&gt; builder) &#123;</div><div class="line">		toppings = builder.toppings.clone(); <span class="comment">// See Item 50</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意 Pizza.Builder 是具有<strong>递归类型参数的泛型</strong> <em>(.30)</em>，self() 可以正常的返回子类型对象而不需要显示的强制转换，是一种惯用的解决 java 缺乏自我类型的变通方法。</p>
<p><code>NyPizza.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> effectivejava.chapter2.item2.hierarchicalbuilder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Objects;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NyPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">enum</span> Size &#123;</div><div class="line">		SMALL, MEDIUM, LARGE</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Size size;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">final</span> Size size;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Size size)</span> </span>&#123;</div><div class="line">			<span class="keyword">this</span>.size = Objects.requireNonNull(size);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> NyPizza <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> NyPizza(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">NyPizza</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(builder);</div><div class="line">		size = builder.size;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="string">"New York Pizza with "</span> + toppings;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Calzone.java</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> effectivejava.chapter2.item2.hierarchicalbuilder;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calzone</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> sauceInside;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">Pizza</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt; </span>&#123;</div><div class="line">		<span class="keyword">private</span> <span class="keyword">boolean</span> sauceInside = <span class="keyword">false</span>; <span class="comment">// Default</span></div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> Builder <span class="title">sauceInside</span><span class="params">()</span> </span>&#123;</div><div class="line">			sauceInside = <span class="keyword">true</span>;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> Calzone <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">new</span> Calzone(<span class="keyword">this</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</div><div class="line">			<span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Calzone</span><span class="params">(Builder builder)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(builder);</div><div class="line">		sauceInside = builder.sauceInside;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> String.format(<span class="string">"Calzone with %s and sauce on the %s"</span>, toppings, sauceInside ? <span class="string">"inside"</span> : <span class="string">"outside"</span>);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意以上两个子类 Builder 中的 build() 方法，它们都返回了实际的类，这种技术称为协变返回类型( covariant return typing)，允许客户端不需要转换直接使用这些builders，下面看客户端代码。</p>
<p><code>PizzaTest</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> effectivejava.chapter2.item2.hierarchicalbuilder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> effectivejava.chapter2.item2.hierarchicalbuilder.Pizza.Topping.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> effectivejava.chapter2.item2.hierarchicalbuilder.NyPizza.Size.*;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaTest</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		NyPizza pizza = <span class="keyword">new</span> NyPizza.Builder(SMALL)</div><div class="line">				.addTopping(SAUSAGE).addTopping(ONION).build();</div><div class="line">		Calzone calzone = <span class="keyword">new</span> Calzone.Builder()</div><div class="line">				.addTopping(HAM).sauceInside().build();</div><div class="line">		</div><div class="line">		System.out.println(pizza);</div><div class="line">		System.out.println(calzone);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      当你在考虑构造器参数的顺序或可选参数怎么办？emm，构建器可能更适合你~
    
    </summary>
    
      <category term="java" scheme="http://yygf.ga/categories/java/"/>
    
    
      <category term="effective java" scheme="http://yygf.ga/tags/effective-java/"/>
    
      <category term="note" scheme="http://yygf.ga/tags/note/"/>
    
      <category term="0x01.创建和销毁对象" scheme="http://yygf.ga/tags/0x01-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>01.考虑使用静态工厂方法代替构造器</title>
    <link href="http://yygf.ga/2018/08/18/01-%E8%80%83%E8%99%91%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E4%BB%A3%E6%9B%BF%E6%9E%84%E9%80%A0%E5%99%A8/"/>
    <id>http://yygf.ga/2018/08/18/01-考虑使用静态工厂方法代替构造器/</id>
    <published>2018-08-18T14:39:34.000Z</published>
    <updated>2018-08-20T02:21:39.610Z</updated>
    
    <content type="html"><![CDATA[<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li><p><strong>有名称</strong></p>
<p>在含有相同签名的多个构造函数的情况下，使用不同名称的静态工厂方法会让API更具可读性。例如：BigInteger 中的一个构造函数 <code>BigInteger(int, int, Random)</code> 返回的 BigInteger 可能为素数，但如果使用 <code>BigInteger.probablePrime</code> 静态工厂方法来表示更为清楚。</p>
</li>
</ul>
<ul>
<li><p><strong>不需要每次调用时都创建一个新的对象</strong></p>
<p> 允许不可变类 <em>(.17)</em> 使用预先构造的实例，或在构造时将实例缓存起来进行重复利用，从而避免创建不必要的重复对象。</p>
</li>
<li><p><strong>可以返回该类型的任意子类型对象</strong></p>
<p> 可以灵活的选择返回该类的对象，一个比较常见的应用是 API 可以返回对象且不会让此对象的类变成公有的，这样可以隐藏实现类，此技术适用于基于接口的框架 <em>(.20)</em> 。在 java8 之前接口不能有静态方法，按照惯例，Type 接口通过不可实例化的 Types 类导出其静态方法，一个具体的列子是 Collection 接口 与 Collections 类。还有一点，这样可以强制让用户通过接口来引用被返回的对象，这通常是最佳实践 <em>(.64)</em> 。在 java8 中接口已经可以含有静态方法，许多静态成员应该被放置在接口本身中。然而，仍有必要将大部分实现代码放在单独包的私有类中而不是接口的静态方法，这是因为 java8 中要求所有静态成员是公开的。java9 允许私有静态方法，但静态字段和静态成员类仍然需要公开。</p>
</li>
<li><p><strong>返回的类可以根据调用参数而进行变化</strong></p>
<p> 这点其实是上面那点的引申，参考 EnumSet <em>(.36)</em> ，它没有构造器，只有静态工厂方法，通过参数来决定返回适合当前参数最优的子类，返回的实现类可以随着版本的迭代有多种不同选择，未来如果发现哪个实现类不适合了，完全可以干掉，并且不会对客户端造成任何影响。</p>
</li>
<li><p><strong>在编写静态工厂方法的时候，被返回的实现类不需要存在</strong></p>
<p> 这种灵活的静态工厂方法构成了<em>服务提供者框架</em> 的基础，例如 JDBC API。<br> <em>服务提供者框架</em> 中有三个基础组件：</p>
<p> ​    <strong><em>服务接口 ( service interface )</em></strong> ：代表实现的服务接口。</p>
<p> ​    <strong><em>提供者注册API ( provider registration API )</em></strong> ：提供者用来注册和实现。</p>
<p> ​    <strong><em>服务访问API ( service access API )</em></strong> ：客户端用来访问服务实例，允许客户端指定选择实现的标准，如果没有这样的标准，API 会返回默认实现的实例，或允许客户端循环查看所有可用的实现。它是构成服务提供者框架基础的灵活静态工厂。</p>
<p> 及一个可选组件：</p>
<p> ​    <strong><em>服务提供者接口 ( service provider interface )</em></strong> ：描述了产生服务接口实例的工厂对象。在没有此接口的情况下，实现就必须通过反射实例化</p>
</li>
</ul>
<p>对于 JDBC 来说 ，Connection 扮演一部分<strong>服务接口</strong>角色，<code>DriverManager.registerDriver</code> 是<strong>提供者注册API</strong>，<code>DriverManager.getConnection</code>  是服务访问 API，Driver 是<strong>服务提供者接口</strong>。<em>服务提供者框架</em> 模式有很多种变体。例如<strong>服务访问API</strong>返回比提供者提供的更为丰富的<strong>服务接口</strong>。这就是桥接模式。依赖注入框架可以被看作是强力服务提供者。java6 平台包含了一个通用的服务提供者框架 java.util.ServiceLoader ，所以你不必，通常也不应该自己写一个。JDBC 没有使用 ServiceLoader 的原因是因为 JDBC 比 ServiceLoader 更早。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li><p><strong>仅提供静态工厂方法的主要限制是没有 public 或 protected 构造器的类无法被子类化</strong></p>
<p>一个类不能被子类化也许会因祸得福，因为它鼓励程序员使用<strong>复合代替继承</strong> <em>(.18)</em> ,并且对<strong>不可变类型</strong> <em>(.17)</em> 来说这是必须的。</p>
</li>
<li><p><strong>程序员不容易找到它</strong></p>
<p>静态工厂方法和普通的静态方法没有什么区别，很难在 API 脱颖而出，所以程序员不太容易知道这个类是否提供静态工厂方法。可以通过关注类或接口的文档并且遵守命名习惯来弥补。以下是用于静态工厂方法的一些常用名称：</p>
<ul>
<li><p><strong>from</strong> - 一种类型转换方法，通过一个参数返回对应类的实例，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Date d = Date.from(instant);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>of</strong> - 一种聚合方法，通过多个参数并返回包含这种参数的类型，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set&lt;Rank&gt; faceCards = EnumSet.of(JACK, QUEEN, KING);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>valueOf</strong> - 一种比 <strong>from</strong> 和 <strong>of</strong> 更为冗长的方案，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BigInteger prime = BigInteger.valueOf(Integer.MAX_VALUE);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>intance</strong> or <strong>getInstance</strong> - 返回由其参数（如果有）描述的实例，但不能说该实例与参数具有相同的值，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">StackWalker luke = StackWalker.getInstance(options);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>create</strong> or <strong>newInstance</strong> - 同上，除了保证每个调用都会返回一个新的实例，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object newArray = Array.newInstance(classObject, arrayLen);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>getType</strong> - 类似 <strong>getInstance</strong> ，但一般不是在该类中定义。<strong>Type</strong> 代表该静态工厂方法返回的对象类型，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FileStore fs = Files.getFileStore(path);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>newType</strong> - 同上，但保证会返回一个新的实例，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BufferedReader br = Files.newBufferedReader(path);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>type</strong> - 一个简单的 getType 和 newType 的替代方案，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Complain&gt; litany = Collections.list(legacyLitany);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>总之，静态工厂方法更可取，所以要避免第一反应就提供公共构造器而不首先考虑静态工厂方法。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      避免第一反应是提供构造器而不考虑使用静态工厂方法
    
    </summary>
    
      <category term="java" scheme="http://yygf.ga/categories/java/"/>
    
    
      <category term="effective java" scheme="http://yygf.ga/tags/effective-java/"/>
    
      <category term="note" scheme="http://yygf.ga/tags/note/"/>
    
      <category term="0x01.创建和销毁对象" scheme="http://yygf.ga/tags/0x01-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Test5</title>
    <link href="http://yygf.ga/2017/06/11/Test5/"/>
    <id>http://yygf.ga/2017/06/11/Test5/</id>
    <published>2017-06-11T06:52:08.000Z</published>
    <updated>2017-06-11T06:53:25.406Z</updated>
    
    <content type="html"><![CDATA[<p>2017-6-11 14:53:23 。。。。。</p>
]]></content>
    
    <summary type="html">
    
      no description...
    
    </summary>
    
      <category term="测试" scheme="http://yygf.ga/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="标签1" scheme="http://yygf.ga/tags/%E6%A0%87%E7%AD%BE1/"/>
    
      <category term="标签2" scheme="http://yygf.ga/tags/%E6%A0%87%E7%AD%BE2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yygf.ga/2017/06/10/hello-world/"/>
    <id>http://yygf.ga/2017/06/10/hello-world/</id>
    <published>2017-06-10T13:54:23.414Z</published>
    <updated>2017-06-10T13:54:23.414Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
