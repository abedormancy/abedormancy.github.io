<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一叶孤帆</title>
  <subtitle>ooOps</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yygf.ga/"/>
  <updated>2018-08-18T15:33:14.352Z</updated>
  <id>http://yygf.ga/</id>
  
  <author>
    <name>abedormancy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>01.考虑使用静态工厂方法代替构造器</title>
    <link href="http://yygf.ga/2018/08/18/01-%E8%80%83%E8%99%91%E4%BD%BF%E7%94%A8%E9%9D%99%E6%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E4%BB%A3%E6%9B%BF%E6%9E%84%E9%80%A0%E5%99%A8/"/>
    <id>http://yygf.ga/2018/08/18/01-考虑使用静态工厂方法代替构造器/</id>
    <published>2018-08-18T14:39:34.000Z</published>
    <updated>2018-08-18T15:33:14.352Z</updated>
    
    <content type="html"><![CDATA[<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li><p><strong>有名称</strong></p>
<p>在含有相同签名的多个构造函数的情况下，使用不同名称的静态工厂方法会让API更具可读性。例如：BigInteger 中的一个构造函数 <code>BigInteger(int, int, Random)</code> 返回的 BigInteger 可能为素数，但如果使用 <code>BigInteger.probablePrime</code> 静态工厂方法来表示更为清楚。</p>
</li>
</ul>
<ul>
<li><p><strong>不需要每次调用时都创建一个新的对象</strong></p>
<p> 允许不可变类 <em>(.17)</em> 使用预先构造的实例，或在构造时将实例缓存起来进行重复利用，从而避免创建不必要的重复对象。</p>
</li>
<li><p><strong>可以返回该类型的任意子类型对象</strong></p>
<p> 可以灵活的选择返回该类的对象，一个比较常见的应用是 API 可以返回对象且不会让此对象的类变成公有的，这样可以隐藏实现类，此技术适用于基于接口的框架 <em>(.20)</em> 。在 java8 之前接口不能有静态方法，按照惯例，Type 接口通过不可实例化的 Types 类导出其静态方法，一个具体的列子是 Collection 接口 与 Collections 类。还有一点，这样可以强制让用户通过接口来引用被返回的对象，这通常是最佳实践 <em>(.64)</em> 。在 java8 中接口已经可以含有静态方法，许多静态成员应该被放置在接口本身中。然而，仍有必要将大部分实现代码放在单独包的私有类中而不是接口的静态方法，这是因为 java8 中要求所有静态成员是公开的。java9 允许私有静态方法，但静态字段和静态成员类仍然需要公开。</p>
</li>
<li><p><strong>返回的类可以根据调用参数而进行变化</strong></p>
<p> 这点其实是上面那点的引申，参考 EnumSet <em>(.36)</em> ，它没有构造器，只有静态工厂方法，通过参数来决定返回适合当前参数最优的子类，返回的实现类可以随着版本的迭代有多种不同选择，未来如果发现哪个实现类不适合了，完全可以干掉，并且不会对客户端造成任何影响。</p>
</li>
<li><p><strong>在编写静态工厂方法的时候，被返回的实现类不需要存在</strong></p>
<p> 这种灵活的静态工厂方法构成了<em>服务提供者框架</em> 的基础，例如 JDBC API。<br> <em>服务提供者框架</em> 中有三个基础组件：</p>
<p> ​    <strong><em>服务接口 ( service interface )</em></strong> ：代表实现的服务接口。</p>
<p> ​    <strong><em>提供者注册API ( provider registration API )</em></strong> ：提供者用来注册和实现。</p>
<p> ​    <strong><em>服务访问API ( service access API )</em></strong> ：客户端用来访问服务实例，允许客户端指定选择实现的标准，如果没有这样的标准，API 会返回默认实现的实例，或允许客户端循环查看所有可用的实现。它是构成服务提供者框架基础的灵活静态工厂。</p>
<p> 及一个可选组件：</p>
<p> ​    <strong><em>服务提供者接口 ( service provider interface )</em></strong> ：描述了产生服务接口实例的工厂对象。在没有此接口的情况下，实现就必须通过反射实例化</p>
</li>
</ul>
<p>对于 JDBC 来说 ，Connection 扮演一部分<strong>服务接口</strong>角色，<code>DriverManager.registerDriver</code> 是<strong>提供者注册API</strong>，<code>DriverManager.getConnection</code>  是服务访问 API，Driver 是<strong>服务提供者接口</strong>。<em>服务提供者框架</em> 模式有很多种变体。例如<strong>服务访问API</strong>返回比提供者提供的更为丰富的<strong>服务接口</strong>。这就是桥接模式。依赖注入框架可以被看作是强力服务提供者。java6 平台包含了一个通用的服务提供者框架 java.util.ServiceLoader ，所以你不必，通常也不应该自己写一个。JDBC 没有使用 ServiceLoader 的原因是因为 JDBC 比 ServiceLoader 更早。</p>
<h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul>
<li><p><strong>仅提供静态工厂方法的主要限制是没有 public 或 protected 构造器的类无法被子类化</strong></p>
<p>一个类不能被子类化也许会因祸得福，因为它鼓励程序员使用<strong>复合代替继承</strong> <em>(.18)</em> ,并且对<strong>不可变类型</strong> <em>(.17)</em> 来说这是必须的。</p>
</li>
<li><p><strong>程序员不容易找到它</strong></p>
<p>静态工厂方法和普通的静态方法没有什么区别，很难在 API 脱颖而出，所以程序员不太容易知道这个类是否提供静态工厂方法。可以通过关注类或接口的文档并且遵守命名习惯来弥补。以下是用于静态工厂方法的一些常用名称：</p>
<ul>
<li><p><strong>from</strong> - 一种类型转换方法，通过一个参数返回对应类的实例，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Date d = Date.from(instant);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>of</strong> - 一种聚合方法，通过多个参数并返回包含这种参数的类型，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Set&lt;Rank&gt; faceCards = EnumSet.of(JACK, QUEEN, KING);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>valueOf</strong> - 一种比 <strong>from</strong> 和 <strong>of</strong> 更为冗长的方案，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BigInteger prime = BigInteger.valueOf(Integer.MAX_VALUE);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>intance</strong> or <strong>getInstance</strong> - 返回由其参数（如果有）描述的实例，但不能说该实例与参数具有相同的值，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">StackWalker luke = StackWalker.getInstance(options);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>create</strong> or <strong>newInstance</strong> - 同上，除了保证每个调用都会返回一个新的实例，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Object newArray = Array.newInstance(classObject, arrayLen);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>getType</strong> - 类似 <strong>getInstance</strong> ，但一般不是在该类中定义。<strong>Type</strong> 代表该静态工厂方法返回的对象类型，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FileStore fs = Files.getFileStore(path);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>newType</strong> - 同上，但保证会返回一个新的实例，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">BufferedReader br = Files.newBufferedReader(path);</div></pre></td></tr></table></figure>
</li>
<li><p><strong>type</strong> - 一个简单的 getType 和 newType 的替代方案，例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">List&lt;Complain&gt; litany = Collections.list(legacyLitany);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>总之，静态工厂方法更可取，所以要避免第一反应就提供公共构造器而不首先考虑静态工厂方法。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      Effective Java Lite
    
    </summary>
    
      <category term="java" scheme="http://yygf.ga/categories/java/"/>
    
    
      <category term="effective java" scheme="http://yygf.ga/tags/effective-java/"/>
    
      <category term="note" scheme="http://yygf.ga/tags/note/"/>
    
      <category term="0x01.创建和销毁对象" scheme="http://yygf.ga/tags/0x01-%E5%88%9B%E5%BB%BA%E5%92%8C%E9%94%80%E6%AF%81%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Test5</title>
    <link href="http://yygf.ga/2017/06/11/Test5/"/>
    <id>http://yygf.ga/2017/06/11/Test5/</id>
    <published>2017-06-11T06:52:08.000Z</published>
    <updated>2017-06-11T06:53:25.406Z</updated>
    
    <content type="html"><![CDATA[<p>2017-6-11 14:53:23 。。。。。</p>
]]></content>
    
    <summary type="html">
    
      no description...
    
    </summary>
    
      <category term="测试" scheme="http://yygf.ga/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="标签1" scheme="http://yygf.ga/tags/%E6%A0%87%E7%AD%BE1/"/>
    
      <category term="标签2" scheme="http://yygf.ga/tags/%E6%A0%87%E7%AD%BE2/"/>
    
  </entry>
  
  <entry>
    <title>Test2</title>
    <link href="http://yygf.ga/2017/06/10/Test2/"/>
    <id>http://yygf.ga/2017/06/10/Test2/</id>
    <published>2017-06-10T15:38:48.000Z</published>
    <updated>2017-06-10T15:39:03.784Z</updated>
    
    <content type="html"><![CDATA[<p>CDN!!!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CDN!!!&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Test1</title>
    <link href="http://yygf.ga/2017/06/10/Test1/"/>
    <id>http://yygf.ga/2017/06/10/Test1/</id>
    <published>2017-06-10T15:07:28.000Z</published>
    <updated>2017-06-10T15:38:41.347Z</updated>
    
    <content type="html"><![CDATA[<p>2017-6-10 23:07:35 update</p>
<p>2017-6-10 23:38:39 update</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017-6-10 23:07:35 update&lt;/p&gt;
&lt;p&gt;2017-6-10 23:38:39 update&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Test</title>
    <link href="http://yygf.ga/2017/06/10/Test/"/>
    <id>http://yygf.ga/2017/06/10/Test/</id>
    <published>2017-06-10T15:05:29.000Z</published>
    <updated>2017-06-10T15:06:08.267Z</updated>
    
    <content type="html"><![CDATA[<p>2017-6-10 23:06:02 update</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017-6-10 23:06:02 update&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yygf.ga/2017/06/10/hello-world/"/>
    <id>http://yygf.ga/2017/06/10/hello-world/</id>
    <published>2017-06-10T13:54:23.414Z</published>
    <updated>2017-06-10T13:54:23.414Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
